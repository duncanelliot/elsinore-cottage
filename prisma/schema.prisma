// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../database"
  outputName = "schema.dbml"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for guest accounts and admin users
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique // For admin users
  password  String   // Will store hashed password
  name      String
  phone     String?
  role      String   @default("guest") // guest, staff, admin, super_admin
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  
  // Permissions
  permissions Permission?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bookings  Booking[]
}

// Permission model for granular access control
model Permission {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Permission categories
  canViewBookings    Boolean @default(false)
  canEditBookings    Boolean @default(false)
  canDeleteBookings  Boolean @default(false)
  canViewUsers       Boolean @default(false)
  canEditUsers       Boolean @default(false)
  canDeleteUsers     Boolean @default(false)
  canManageSettings  Boolean @default(false)
  canViewReports     Boolean @default(false)
  canManageCalendar  Boolean @default(false)
  canManagePricing   Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId])
}

// Booking model for reservations
model Booking {
  id              String   @id @default(cuid())
  bookingRef      String   @unique // e.g., "ELS-2024-0820"
  
  // Guest information
  guestName       String
  guestEmail      String
  guestPhone      String?
  numberOfGuests  Int
  specialRequests String?
  
  // Booking dates
  checkIn         DateTime
  checkOut        DateTime
  
  // Financial
  totalAmount     Float
  depositPaid     Float    @default(0)
  isPaid          Boolean  @default(false)
  
  // Status
  status          String   @default("pending") // pending, confirmed, cancelled, completed
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  userId          String?  // Optional link to user account
  user            User?    @relation(fields: [userId], references: [id])
}

// Availability model for calendar management
model Availability {
  id          String   @id @default(cuid())
  date        DateTime @unique
  isAvailable Boolean  @default(true)
  isBlocked   Boolean  @default(false) // For maintenance/owner use
  priceOverride Float? // Override base price for specific dates
  notes       String?  // Internal notes
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Pricing tiers for dynamic pricing
model PricingTier {
  id         String   @id @default(cuid())
  name       String   // e.g., "Peak Season", "Weekend"
  startDate  DateTime?
  endDate    DateTime?
  multiplier Float    // e.g., 1.5 for 50% increase
  priority   Int      @default(0) // Higher priority overrides lower
  isActive   Boolean  @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Admin settings for configuration
model AdminSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Guest reviews/feedback
model Review {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  rating     Int      // 1-5 stars
  comment    String?
  guestName  String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Contact form submissions
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  type      String   @default("general") // general, booking, maintenance
  isRead    Boolean  @default(false)

  createdAt DateTime @default(now())
}

// Room categories enum
enum Room {
  LIVING_ROOM
  DINING_ROOM
  KITCHEN
  STAIRS
  BEDROOM_MAIN
  BEDROOM_ENSUITE
  BEDROOM_STUDY
  BATHROOM
  BATHROOM_ENSUITE
  TOILETS
  GARDEN
  HALLWAY
}

// Furniture items for the house
model FurnitureItem {
  id              String   @id @default(cuid())
  item            String   // e.g., "Sofa", "Dining Table"
  product         String   // Product name/description
  price           String   // Price as string to handle "TBD", ranges, etc.
  link            String   // Product URL
  room            Room     // Room category (enum)
  roomDisplayName String   // Human-readable room name
  roomColor       String   // Color for UI (blue, green, etc.)
  primaryImage    String?  // Primary image URL
  priority        Int      @default(0) // For ordering items
  isActive        Boolean  @default(true) // Whether to show this item
  buy             Boolean  @default(true) // Whether this item is selected for purchase
  notes           String?  // Additional notes

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  images          FurnitureItemLink[]
}

// Links table for furniture item images and other resources
model FurnitureItemLink {
  id              String   @id @default(cuid())
  furnitureItemId String
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id], onDelete: Cascade)

  url             String   // Image URL or other resource URL
  sourceUrl       String?  // Retailer/website URL where the image came from
  retailerName    String?  // Name of the retailer (e.g., "John Lewis", "Amazon")
  type            String   @default("image") // "image", "video", "document", etc.
  description     String?  // Optional description
  isPrimary       Boolean  @default(false) // Whether this is the primary image
  priority        Int      @default(0) // For ordering multiple images

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}